use structopt::StructOpt;

#[derive(Debug, StructOpt)]
enum Opt {
    D01p1,
    D01p2,
    D02p1,
    D02p2,
    D03p1,
    D03p2,
    D04p1,
    D04p2,
    D05p1,
    D05p2,
    D06p1,
    D06p2,
    D07p1,
    D07p2,
    D08p1,
    D08p2,
    D09p1,
    D09p2,
    D10p1,
    D10p2,
    D11p1,
    D11p2,
    D12p1,
    D12p2,
    D13p1,
    D13p2,
    D14p1,
    D14p2,
    D15p1,
    D15p2,
    D16p1,
    D16p2,
    D17p1,
    D17p2,
    D18p1,
    D18p2,
    D19p1,
    D19p2,
    D20p1,
    D20p2,
    D21p1,
    D21p2,
    D22p1,
    D22p2,
    D23p1,
    D23p2,
    D24p1,
    D24p2,
    D25p1,
    D25p2,
}

fn main() {
    let stdin = std::io::stdin();
    let lock = stdin.lock();
    let opt = Opt::from_args();
    let output = match opt {
        Opt::D01p1 => advent_of_code_2022::d01::p1::run(lock),
        Opt::D01p2 => advent_of_code_2022::d01::p2::run(lock),
        Opt::D02p1 => advent_of_code_2022::d02::p1::run(lock),
        Opt::D02p2 => advent_of_code_2022::d02::p2::run(lock),
        Opt::D03p1 => advent_of_code_2022::d03::p1::run(lock),
        Opt::D03p2 => advent_of_code_2022::d03::p2::run(lock),
        Opt::D04p1 => advent_of_code_2022::d04::p1::run(lock),
        Opt::D04p2 => advent_of_code_2022::d04::p2::run(lock),
        Opt::D05p1 => advent_of_code_2022::d05::p1::run(lock),
        Opt::D05p2 => advent_of_code_2022::d05::p2::run(lock),
        Opt::D06p1 => advent_of_code_2022::d06::p1::run(lock),
        Opt::D06p2 => advent_of_code_2022::d06::p2::run(lock),
        Opt::D07p1 => advent_of_code_2022::d07::p1::run(lock),
        Opt::D07p2 => advent_of_code_2022::d07::p2::run(lock),
        Opt::D08p1 => advent_of_code_2022::d08::p1::run(lock),
        Opt::D08p2 => advent_of_code_2022::d08::p2::run(lock),
        Opt::D09p1 => advent_of_code_2022::d09::p1::run(lock),
        Opt::D09p2 => advent_of_code_2022::d09::p2::run(lock),
        Opt::D10p1 => advent_of_code_2022::d10::p1::run(lock),
        Opt::D10p2 => advent_of_code_2022::d10::p2::run(lock),
        Opt::D11p1 => advent_of_code_2022::d11::p1::run(lock),
        Opt::D11p2 => advent_of_code_2022::d11::p2::run(lock),
        Opt::D12p1 => advent_of_code_2022::d12::p1::run(lock),
        Opt::D12p2 => advent_of_code_2022::d12::p2::run(lock),
        Opt::D13p1 => advent_of_code_2022::d13::p1::run(lock),
        Opt::D13p2 => advent_of_code_2022::d13::p2::run(lock),
        Opt::D14p1 => advent_of_code_2022::d14::p1::run(lock),
        Opt::D14p2 => advent_of_code_2022::d14::p2::run(lock),
        Opt::D15p1 => advent_of_code_2022::d15::p1::run(lock),
        Opt::D15p2 => advent_of_code_2022::d15::p2::run(lock),
        Opt::D16p1 => advent_of_code_2022::d16::p1::run(lock),
        Opt::D16p2 => advent_of_code_2022::d16::p2::run(lock),
        Opt::D17p1 => advent_of_code_2022::d17::p1::run(lock),
        Opt::D17p2 => advent_of_code_2022::d17::p2::run(lock),
        Opt::D18p1 => advent_of_code_2022::d18::p1::run(lock),
        Opt::D18p2 => advent_of_code_2022::d18::p2::run(lock),
        Opt::D19p1 => advent_of_code_2022::d19::p1::run(lock),
        Opt::D19p2 => advent_of_code_2022::d19::p2::run(lock),
        Opt::D20p1 => advent_of_code_2022::d20::p1::run(lock),
        Opt::D20p2 => advent_of_code_2022::d20::p2::run(lock),
        Opt::D21p1 => advent_of_code_2022::d21::p1::run(lock),
        Opt::D21p2 => advent_of_code_2022::d21::p2::run(lock),
        Opt::D22p1 => advent_of_code_2022::d22::p1::run(lock),
        Opt::D22p2 => advent_of_code_2022::d22::p2::run(lock),
        Opt::D23p1 => advent_of_code_2022::d23::p1::run(lock),
        Opt::D23p2 => advent_of_code_2022::d23::p2::run(lock),
        Opt::D24p1 => advent_of_code_2022::d24::p1::run(lock),
        Opt::D24p2 => advent_of_code_2022::d24::p2::run(lock),
        Opt::D25p1 => advent_of_code_2022::d25::p1::run(lock),
        Opt::D25p2 => advent_of_code_2022::d25::p2::run(lock),
    };
    println!("{}", output)
}
